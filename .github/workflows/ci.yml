name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript 타입 검사
      run: npm run typecheck
      
    - name: ESLint 코드 스타일 검사
      run: npm run lint
      
    - name: Jest 단위 테스트 실행
      run: npm run test:ci
      
    - name: 테스트 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: 테스트 결과 리포트
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Jest Tests
        path: coverage/jest-junit.xml
        reporter: jest-junit

  # 성능 테스트 작업 추가
  performance-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bundle 크기 분석
      run: |
        npm run build
        npx bundlesize
      
    - name: 메모리 사용량 테스트
      run: |
        echo "메모리 사용량 테스트 실행..."
        node --max-old-space-size=512 -e "console.log('메모리 테스트 완료')"

  # 보안 검사 작업 추가
  security-scan:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: 의존성 보안 검사
      run: npm audit --audit-level high
      
    - name: CodeQL 보안 분석
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: CodeQL 분석 실행
      uses: github/codeql-action/analyze@v2

  build-android:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Install dependencies
      run: npm ci
      
    - name: Build Android APK
      run: |
        npm run build:android --if-present
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: android/app/build/outputs/apk/release/*.apk

  expo-build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
      
    - name: Install dependencies
      run: npm ci
      
    - name: Expo build (if configured)
      run: |
        if [ -f "eas.json" ]; then
          npx eas build --platform all --non-interactive
        else
          echo "EAS configuration not found, skipping build"
        fi
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  deploy:
    needs: [test, build-android]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 여기에 실제 배포 스크립트를 추가하세요
        
    - name: Notify deployment
      run: |
        echo "Deployment completed successfully!"
