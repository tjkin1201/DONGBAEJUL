// Dongbaejul 배드민턴 동호회 앱 데이터베이스 스키마
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 역할 ENUM
enum UserRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  MEMBER
}

// 사용자 상태 ENUM
enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  PENDING
}

// 채팅방 타입 ENUM
enum RoomType {
  GROUP
  PRIVATE
  ANNOUNCEMENT
}

// 메시지 타입 ENUM
enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

// 사용자 모델
model User {
  id           String     @id @default(uuid())
  bandUserId   String     @unique @map("band_user_id")
  username     String     @db.VarChar(50)
  displayName  String     @map("display_name") @db.VarChar(100)
  email        String?    @db.VarChar(255)
  phone        String?    @db.VarChar(20)
  avatarUrl    String?    @map("avatar_url")
  role         UserRole   @default(MEMBER)
  status       UserStatus @default(ACTIVE)
  skillLevel   Int        @default(1) @map("skill_level")
  joinedAt     DateTime   @default(now()) @map("joined_at")
  lastActiveAt DateTime   @default(now()) @map("last_active_at")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  posts         Post[]
  comments      Comment[]
  photos        Photo[]
  albums        Album[]
  chatRooms     ChatRoom[] // 생성한 채팅방
  sentMessages  ChatMessage[] @relation("MessageSender")
  adminActions  AdminAction[]

  @@map("users")
}

// 카테고리 모델
model Category {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  description String?
  color       String   @default("#1976D2") @db.VarChar(7)
  icon        String?  @db.VarChar(50)
  isAdminOnly Boolean  @default(false) @map("is_admin_only")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  posts Post[]

  @@map("categories")
}

// 게시글 모델
model Post {
  id           String   @id @default(uuid())
  title        String   @db.VarChar(200)
  content      String
  authorId     String   @map("author_id")
  categoryId   String   @map("category_id")
  isPinned     Boolean  @default(false) @map("is_pinned")
  isPublished  Boolean  @default(true) @map("is_published")
  viewCount    Int      @default(0) @map("view_count")
  likeCount    Int      @default(0) @map("like_count")
  commentCount Int      @default(0) @map("comment_count")
  tags         String[]
  metaData     Json?    @map("meta_data")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@index([authorId])
  @@index([categoryId])
  @@index([createdAt(sort: Desc)])
  @@index([isPinned, createdAt(sort: Desc)])
  @@map("posts")
}

// 댓글 모델
model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String   @map("author_id")
  postId    String   @map("post_id")
  parentId  String?  @map("parent_id")
  isDeleted Boolean  @default(false) @map("is_deleted")
  likeCount Int      @default(0) @map("like_count")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")

  @@index([postId, createdAt])
  @@index([authorId])
  @@index([parentId])
  @@map("comments")
}

// 앨범 모델
model Album {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(200)
  description  String?
  coverPhotoId String?  @map("cover_photo_id")
  createdBy    String   @map("created_by")
  isPublic     Boolean  @default(true) @map("is_public")
  photoCount   Int      @default(0) @map("photo_count")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  creator    User    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  coverPhoto Photo?  @relation("AlbumCover", fields: [coverPhotoId], references: [id], onDelete: SetNull)
  photos     Photo[] @relation("AlbumPhotos")

  @@map("albums")
}

// 사진 모델
model Photo {
  id           String   @id @default(uuid())
  title        String   @db.VarChar(200)
  description  String?
  fileUrl      String   @map("file_url")
  thumbnailUrl String?  @map("thumbnail_url")
  fileSize     BigInt?  @map("file_size")
  mimeType     String?  @map("mime_type") @db.VarChar(100)
  width        Int?
  height       Int?
  uploadedBy   String   @map("uploaded_by")
  albumId      String?  @map("album_id")
  tags         String[]
  isPublic     Boolean  @default(true) @map("is_public")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  uploader     User    @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  album        Album?  @relation("AlbumPhotos", fields: [albumId], references: [id], onDelete: SetNull)
  albumsAsCover Album[] @relation("AlbumCover")

  @@map("photos")
}

// 채팅방 모델
model ChatRoom {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(200)
  description String?
  type        RoomType @default(GROUP)
  isPrivate   Boolean  @default(false) @map("is_private")
  maxMembers  Int      @default(200) @map("max_members")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  creator  User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chat_rooms")
}

// 채팅 메시지 모델
model ChatMessage {
  id          String      @id @default(uuid())
  roomId      String      @map("room_id")
  senderId    String      @map("sender_id")
  content     String
  messageType MessageType @default(TEXT) @map("message_type")
  replyToId   String?     @map("reply_to")
  attachments Json?
  isEdited    Boolean     @default(false) @map("is_edited")
  isDeleted   Boolean     @default(false) @map("is_deleted")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  room    ChatRoom     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender  User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  replyTo ChatMessage? @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies ChatMessage[] @relation("MessageReplies")

  @@index([roomId, createdAt])
  @@index([senderId])
  @@map("chat_messages")
}

// 관리자 작업 로그 모델
model AdminAction {
  id         String   @id @default(uuid())
  adminId    String   @map("admin_id")
  action     String   @db.VarChar(100)
  targetType String   @map("target_type") @db.VarChar(50)
  targetId   String?  @map("target_id")
  details    Json?
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([createdAt])
  @@map("admin_actions")
}
