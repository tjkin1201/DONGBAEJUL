# 동배즐 (Dongbaejul) - 배드민턴 클럽 관리 앱 PRD

## Overview
동배즐은 배드민턴 동호회 운영을 효율화하고 멤버들의 참여도를 높이는 React Native 모바일 앱입니다. 
기존의 Naver Band 플랫폼에서 분산되어 있던 클럽 관리 기능들을 하나의 앱으로 통합하여, 
체육관 현장에서도 쉽게 사용할 수 있는 직관적인 인터페이스를 제공합니다.

**해결하는 문제:**
- 체육관 현장에서 게임 매칭 및 점수 기록의 번거로움
- 동호회 소식과 공지사항의 분산 관리
- 멤버 간 소통 채널의 비효율성
- 사진 공유 및 기록 관리의 어려움

**타겟 사용자:**
- 배드민턴 동호회 운영진 및 멤버 (최대 200명)
- 정기적으로 체육관에서 경기를 하는 클럽
- Naver Band를 현재 사용 중인 기존 동호회

## Core Features

### 1. 홈 페이지 (메인 대시보드)
- **클럽 정보 표시**: 로고, 모임명, 간단한 소개
- **실시간 공지사항**: 최신 3개 공지 표시 (더보기 → 게시판 이동)
- **게임 현황**: 진행중/예정된 게임 현황 (운영진 권한)
- **멤버 목록**: 전체 멤버 리스트 (최대 200명)
- **빠른 액션**: 채팅방 입장, 사진첩 이동 등

### 2. 게시판 시스템
- **공지사항 관리**: 운영진 전용 공지 작성/수정/삭제
- **게시글 분류**: 고정 공지, 일반 공지, 자유 게시판
- **댓글 시스템**: 게시글별 댓글 및 대댓글
- **첨부파일**: 이미지 첨부 기능
- **검색 기능**: 제목, 내용, 작성자 검색

### 3. 사진첩 (Naver Band 연동)
- **Band API 연동**: 기존 Naver Band 사진첩 동기화
- **갤러리 뷰**: 그리드 형태의 사진 표시
- **사진 업로드**: 직접 사진 업로드 및 Band 동기화
- **카테고리 분류**: 경기별, 날짜별 분류
- **다운로드 기능**: 개별 사진 저장

### 4. 실시간 채팅
- **전체 채팅방**: 모든 멤버 참여 가능한 메인 채팅
- **1:1 개인 채팅**: 멤버 간 개별 메시지
- **귓속말 기능**: 체육관 현장에서 조용한 소통
- **메시지 알림**: 푸시 알림 및 배지 표시
- **이모티콘**: 간단한 반응 이모티콘

### 5. 게임 현황판 (운영진 전용)
- **게임 생성**: 경기 일정 및 참가자 모집
- **실시간 현황**: 진행중인 게임 상태 표시
- **점수 기록**: 경기 결과 입력 및 저장
- **참가자 관리**: 게임별 참가자 목록 관리
- **통계 기능**: 개인별, 팀별 경기 기록

## User Experience

### 사용자 페르소나
1. **클럽 운영진 (관리자)**
   - 공지사항 작성, 게임 현황 관리
   - 멤버 관리 및 권한 설정
   - 통계 및 기록 관리

2. **액티브 멤버**
   - 정기적 참여, 채팅 활용
   - 사진 업로드 및 공유
   - 게임 참가 신청

3. **일반 멤버**
   - 공지사항 확인
   - 가끔 채팅 참여
   - 사진첩 열람

### 주요 사용자 플로우
1. **앱 실행 → 홈 화면**: 한눈에 클럽 현황 파악
2. **체육관 도착 → 게임 현황**: 오늘의 경기 스케줄 확인
3. **경기 중 → 점수 기록**: 실시간 점수 업데이트 (운영진)
4. **경기 후 → 사진 업로드**: 오늘의 경기 사진 공유
5. **집에서 → 채팅/게시판**: 클럽 소식 및 소통

### UI/UX 고려사항
- **체육관 환경 최적화**: 큰 터치 영역, 선명한 색상 대비
- **한손 조작 가능**: 세로 화면 최적화, 하단 네비게이션
- **직관적 아이콘**: 배드민턴 테마 아이콘 사용
- **빠른 로딩**: 오프라인 캐싱, 이미지 압축

## Technical Architecture

### Frontend (React Native)
- **프레임워크**: React Native 0.74.x + Expo SDK 51
- **UI 라이브러리**: React Native Paper (Material Design)
- **네비게이션**: React Navigation 6 (Bottom Tabs + Stack)
- **상태관리**: Context API + AsyncStorage
- **HTTP 클라이언트**: Axios

### Backend 연동
- **기존 Band API**: Naver Band 데이터 동기화
- **자체 서버**: 채팅, 게임 기록용 Node.js 서버
- **실시간 통신**: Socket.IO (채팅, 게임 현황)
- **데이터베이스**: Firebase Firestore (오프라인 지원)

### 외부 서비스 연동
- **Naver Band API**: 사진첩, 멤버 정보 동기화
- **푸시 알림**: Expo Notifications
- **이미지 처리**: Expo ImagePicker + 압축
- **인증**: Band OAuth + 자체 토큰

## Development Roadmap

### Phase 1: MVP (핵심 기능)
**목표**: 기본적인 클럽 관리 기능 구현
- 홈 화면 (클럽 정보, 멤버 목록)
- 간단한 게시판 (공지사항만)
- 기본 채팅 (전체 채팅방)
- Naver Band 로그인 연동
- 기본 네비게이션 구조

### Phase 2: 소통 기능 강화
**목표**: 멤버 간 소통 활성화
- 1:1 개인 채팅
- 게시판 댓글 시스템
- 푸시 알림 시스템
- 사진첩 기본 기능 (Band 연동)
- 검색 기능

### Phase 3: 게임 관리 시스템
**목표**: 체육관 현장 사용성 개선
- 게임 현황판 (운영진)
- 실시간 점수 기록
- 게임 참가 신청 시스템
- 경기 기록 및 통계
- 오프라인 모드 지원

### Phase 4: 고급 기능
**목표**: 사용자 경험 최적화
- 고급 통계 및 랭킹
- 이벤트 일정 관리
- 회비 관리 시스템
- 다크 모드 지원
- 성능 최적화

## Logical Dependency Chain

### 1. 기반 구조 구축 (Foundation)
- React Navigation 설정
- Context API 구조
- Band API 연동 기본 설정
- 공통 컴포넌트 개발

### 2. 인증 및 홈 화면 (Quick Win)
- Band OAuth 로그인
- 홈 화면 기본 레이아웃
- 멤버 정보 표시
- 기본 네비게이션

### 3. 소통 기능 (User Engagement)
- 전체 채팅방 구현
- 기본 게시판 (공지사항)
- 푸시 알림 기초

### 4. 전문 기능 (Differentiation)
- 게임 현황판
- 사진첩 Band 연동
- 고급 채팅 기능

### 5. 최적화 및 확장 (Polish)
- 성능 개선
- 오프라인 지원
- 추가 기능들

## Risks and Mitigations

### 기술적 도전
**리스크**: Naver Band API 변경 또는 제한
**완화책**: 자체 백업 데이터베이스 구축, API 래핑 레이어 구현

**리스크**: 실시간 채팅 성능 이슈
**완화책**: 메시지 페이지네이션, 연결 풀 관리, 오프라인 큐

### MVP 범위 설정
**리스크**: 기능 과욕으로 인한 개발 지연
**완화책**: 단계별 배포, 사용자 피드백 기반 우선순위 조정

**리스크**: Band 의존성으로 인한 제약
**완화책**: 점진적 자체 시스템 전환, 하이브리드 접근

### 자원 제약
**리스크**: 개발자 리소스 부족
**완화책**: 우선순위 기반 개발, 외부 라이브러리 활용

**리스크**: 서버 비용 증가
**완화책**: Firebase 프리티어 활용, 효율적 데이터 구조

## Appendix

### 기존 연구 및 분석
- 프로토타입 사용자 테스트 결과 반영
- 체육관 현장 사용성 분석
- 기존 Band 사용 패턴 분석

### 기술 명세
- React Native 0.74.x 호환성
- Expo SDK 51 기능 활용
- Material Design 3 적용
- 접근성 가이드라인 준수

### 성능 목표
- 앱 실행 시간: 3초 이내
- 화면 전환: 300ms 이내
- 메시지 전송: 1초 이내
- 이미지 로딩: 5초 이내
